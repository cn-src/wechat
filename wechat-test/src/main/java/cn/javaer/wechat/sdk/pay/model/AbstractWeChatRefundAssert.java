package cn.javaer.wechat.sdk.pay.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link WeChatRefund} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWeChatRefundAssert<S extends AbstractWeChatRefundAssert<S, A>, A extends WeChatRefund> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWeChatRefundAssert}</code> to make assertions on actual WeChatRefund.
   * @param actual the WeChatRefund we want to make assertions on.
   */
  protected AbstractWeChatRefundAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WeChatRefund's couponRefundCount is equal to the given one.
   * @param couponRefundCount the given couponRefundCount to compare the actual WeChatRefund's couponRefundCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's couponRefundCount is not equal to the given one.
   */
  public S hasCouponRefundCount(Integer couponRefundCount) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponRefundCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualCouponRefundCount = actual.getCouponRefundCount();
    if (!Objects.areEqual(actualCouponRefundCount, couponRefundCount)) {
      failWithMessage(assertjErrorMessage, actual, couponRefundCount, actualCouponRefundCount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's couponRefundFee is equal to the given one.
   * @param couponRefundFee the given couponRefundFee to compare the actual WeChatRefund's couponRefundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's couponRefundFee is not equal to the given one.
   */
  public S hasCouponRefundFee(Integer couponRefundFee) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponRefundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualCouponRefundFee = actual.getCouponRefundFee();
    if (!Objects.areEqual(actualCouponRefundFee, couponRefundFee)) {
      failWithMessage(assertjErrorMessage, actual, couponRefundFee, actualCouponRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's outRefundNo is equal to the given one.
   * @param outRefundNo the given outRefundNo to compare the actual WeChatRefund's outRefundNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's outRefundNo is not equal to the given one.
   */
  public S hasOutRefundNo(String outRefundNo) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outRefundNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutRefundNo = actual.getOutRefundNo();
    if (!Objects.areEqual(actualOutRefundNo, outRefundNo)) {
      failWithMessage(assertjErrorMessage, actual, outRefundNo, actualOutRefundNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's refundAccount is equal to the given one.
   * @param refundAccount the given refundAccount to compare the actual WeChatRefund's refundAccount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's refundAccount is not equal to the given one.
   */
  public S hasRefundAccount(String refundAccount) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundAccount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundAccount = actual.getRefundAccount();
    if (!Objects.areEqual(actualRefundAccount, refundAccount)) {
      failWithMessage(assertjErrorMessage, actual, refundAccount, actualRefundAccount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's refundChannel is equal to the given one.
   * @param refundChannel the given refundChannel to compare the actual WeChatRefund's refundChannel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's refundChannel is not equal to the given one.
   */
  public S hasRefundChannel(String refundChannel) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundChannel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundChannel = actual.getRefundChannel();
    if (!Objects.areEqual(actualRefundChannel, refundChannel)) {
      failWithMessage(assertjErrorMessage, actual, refundChannel, actualRefundChannel);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's refundCoupons is equal to the given one.
   * @param refundCoupons the given refundCoupons to compare the actual WeChatRefund's refundCoupons to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's refundCoupons is not equal to the given one.
   */
  public S hasRefundCoupons(java.util.Map refundCoupons) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundCoupons of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualRefundCoupons = actual.getRefundCoupons();
    if (!Objects.areEqual(actualRefundCoupons, refundCoupons)) {
      failWithMessage(assertjErrorMessage, actual, refundCoupons, actualRefundCoupons);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's refundFee is equal to the given one.
   * @param refundFee the given refundFee to compare the actual WeChatRefund's refundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's refundFee is not equal to the given one.
   */
  public S hasRefundFee(Integer refundFee) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualRefundFee = actual.getRefundFee();
    if (!Objects.areEqual(actualRefundFee, refundFee)) {
      failWithMessage(assertjErrorMessage, actual, refundFee, actualRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's refundId is equal to the given one.
   * @param refundId the given refundId to compare the actual WeChatRefund's refundId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's refundId is not equal to the given one.
   */
  public S hasRefundId(String refundId) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundId = actual.getRefundId();
    if (!Objects.areEqual(actualRefundId, refundId)) {
      failWithMessage(assertjErrorMessage, actual, refundId, actualRefundId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's refundRecvAccout is equal to the given one.
   * @param refundRecvAccout the given refundRecvAccout to compare the actual WeChatRefund's refundRecvAccout to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's refundRecvAccout is not equal to the given one.
   */
  public S hasRefundRecvAccout(String refundRecvAccout) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundRecvAccout of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundRecvAccout = actual.getRefundRecvAccout();
    if (!Objects.areEqual(actualRefundRecvAccout, refundRecvAccout)) {
      failWithMessage(assertjErrorMessage, actual, refundRecvAccout, actualRefundRecvAccout);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's refundStatus is equal to the given one.
   * @param refundStatus the given refundStatus to compare the actual WeChatRefund's refundStatus to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's refundStatus is not equal to the given one.
   */
  public S hasRefundStatus(String refundStatus) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundStatus of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundStatus = actual.getRefundStatus();
    if (!Objects.areEqual(actualRefundStatus, refundStatus)) {
      failWithMessage(assertjErrorMessage, actual, refundStatus, actualRefundStatus);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's refundSuccessTime is equal to the given one.
   * @param refundSuccessTime the given refundSuccessTime to compare the actual WeChatRefund's refundSuccessTime to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's refundSuccessTime is not equal to the given one.
   */
  public S hasRefundSuccessTime(String refundSuccessTime) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundSuccessTime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundSuccessTime = actual.getRefundSuccessTime();
    if (!Objects.areEqual(actualRefundSuccessTime, refundSuccessTime)) {
      failWithMessage(assertjErrorMessage, actual, refundSuccessTime, actualRefundSuccessTime);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatRefund's settlementRefundFee is equal to the given one.
   * @param settlementRefundFee the given settlementRefundFee to compare the actual WeChatRefund's settlementRefundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatRefund's settlementRefundFee is not equal to the given one.
   */
  public S hasSettlementRefundFee(Integer settlementRefundFee) {
    // check that actual WeChatRefund we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting settlementRefundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualSettlementRefundFee = actual.getSettlementRefundFee();
    if (!Objects.areEqual(actualSettlementRefundFee, settlementRefundFee)) {
      failWithMessage(assertjErrorMessage, actual, settlementRefundFee, actualSettlementRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
