package cn.javaer.wechat.sdk.pay.model;

import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link WeChatPayRefundRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWeChatPayRefundRequestAssert<S extends AbstractWeChatPayRefundRequestAssert<S, A>, A extends WeChatPayRefundRequest> extends AbstractWeChatPayRequestAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWeChatPayRefundRequestAssert}</code> to make assertions on actual WeChatPayRefundRequest.
   * @param actual the WeChatPayRefundRequest we want to make assertions on.
   */
  protected AbstractWeChatPayRefundRequestAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WeChatPayRefundRequest's outRefundNo is equal to the given one.
   * @param outRefundNo the given outRefundNo to compare the actual WeChatPayRefundRequest's outRefundNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundRequest's outRefundNo is not equal to the given one.
   */
  public S hasOutRefundNo(String outRefundNo) {
    // check that actual WeChatPayRefundRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outRefundNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutRefundNo = actual.getOutRefundNo();
    if (!Objects.areEqual(actualOutRefundNo, outRefundNo)) {
      failWithMessage(assertjErrorMessage, actual, outRefundNo, actualOutRefundNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundRequest's outTradeNo is equal to the given one.
   * @param outTradeNo the given outTradeNo to compare the actual WeChatPayRefundRequest's outTradeNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundRequest's outTradeNo is not equal to the given one.
   */
  public S hasOutTradeNo(String outTradeNo) {
    // check that actual WeChatPayRefundRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outTradeNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutTradeNo = actual.getOutTradeNo();
    if (!Objects.areEqual(actualOutTradeNo, outTradeNo)) {
      failWithMessage(assertjErrorMessage, actual, outTradeNo, actualOutTradeNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundRequest's refundAccount is equal to the given one.
   * @param refundAccount the given refundAccount to compare the actual WeChatPayRefundRequest's refundAccount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundRequest's refundAccount is not equal to the given one.
   */
  public S hasRefundAccount(String refundAccount) {
    // check that actual WeChatPayRefundRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundAccount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundAccount = actual.getRefundAccount();
    if (!Objects.areEqual(actualRefundAccount, refundAccount)) {
      failWithMessage(assertjErrorMessage, actual, refundAccount, actualRefundAccount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundRequest's refundDesc is equal to the given one.
   * @param refundDesc the given refundDesc to compare the actual WeChatPayRefundRequest's refundDesc to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundRequest's refundDesc is not equal to the given one.
   */
  public S hasRefundDesc(String refundDesc) {
    // check that actual WeChatPayRefundRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundDesc of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundDesc = actual.getRefundDesc();
    if (!Objects.areEqual(actualRefundDesc, refundDesc)) {
      failWithMessage(assertjErrorMessage, actual, refundDesc, actualRefundDesc);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundRequest's refundFee is equal to the given one.
   * @param refundFee the given refundFee to compare the actual WeChatPayRefundRequest's refundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundRequest's refundFee is not equal to the given one.
   */
  public S hasRefundFee(int refundFee) {
    // check that actual WeChatPayRefundRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualRefundFee = actual.getRefundFee();
    if (actualRefundFee != refundFee) {
      failWithMessage(assertjErrorMessage, actual, refundFee, actualRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundRequest's refundFeeType is equal to the given one.
   * @param refundFeeType the given refundFeeType to compare the actual WeChatPayRefundRequest's refundFeeType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundRequest's refundFeeType is not equal to the given one.
   */
  public S hasRefundFeeType(String refundFeeType) {
    // check that actual WeChatPayRefundRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundFeeType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundFeeType = actual.getRefundFeeType();
    if (!Objects.areEqual(actualRefundFeeType, refundFeeType)) {
      failWithMessage(assertjErrorMessage, actual, refundFeeType, actualRefundFeeType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundRequest's totalFee is equal to the given one.
   * @param totalFee the given totalFee to compare the actual WeChatPayRefundRequest's totalFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundRequest's totalFee is not equal to the given one.
   */
  public S hasTotalFee(int totalFee) {
    // check that actual WeChatPayRefundRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting totalFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualTotalFee = actual.getTotalFee();
    if (actualTotalFee != totalFee) {
      failWithMessage(assertjErrorMessage, actual, totalFee, actualTotalFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundRequest's transactionId is equal to the given one.
   * @param transactionId the given transactionId to compare the actual WeChatPayRefundRequest's transactionId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundRequest's transactionId is not equal to the given one.
   */
  public S hasTransactionId(String transactionId) {
    // check that actual WeChatPayRefundRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting transactionId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTransactionId = actual.getTransactionId();
    if (!Objects.areEqual(actualTransactionId, transactionId)) {
      failWithMessage(assertjErrorMessage, actual, transactionId, actualTransactionId);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
