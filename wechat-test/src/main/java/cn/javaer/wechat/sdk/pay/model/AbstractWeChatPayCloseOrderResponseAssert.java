package cn.javaer.wechat.sdk.pay.model;

import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link WeChatPayCloseOrderResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWeChatPayCloseOrderResponseAssert<S extends AbstractWeChatPayCloseOrderResponseAssert<S, A>, A extends WeChatPayCloseOrderResponse> extends AbstractWeChatPayResponseAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWeChatPayCloseOrderResponseAssert}</code> to make assertions on actual WeChatPayCloseOrderResponse.
   * @param actual the WeChatPayCloseOrderResponse we want to make assertions on.
   */
  protected AbstractWeChatPayCloseOrderResponseAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WeChatPayCloseOrderResponse's resultMsg is equal to the given one.
   * @param resultMsg the given resultMsg to compare the actual WeChatPayCloseOrderResponse's resultMsg to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayCloseOrderResponse's resultMsg is not equal to the given one.
   */
  public S hasResultMsg(String resultMsg) {
    // check that actual WeChatPayCloseOrderResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting resultMsg of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualResultMsg = actual.getResultMsg();
    if (!Objects.areEqual(actualResultMsg, resultMsg)) {
      failWithMessage(assertjErrorMessage, actual, resultMsg, actualResultMsg);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
