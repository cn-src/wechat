package cn.javaer.wechat.sdk.pay.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link WeChatPayCloseOrderRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWeChatPayCloseOrderRequestAssert<S extends AbstractWeChatPayCloseOrderRequestAssert<S, A>, A extends WeChatPayCloseOrderRequest> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWeChatPayCloseOrderRequestAssert}</code> to make assertions on actual WeChatPayCloseOrderRequest.
   * @param actual the WeChatPayCloseOrderRequest we want to make assertions on.
   */
  protected AbstractWeChatPayCloseOrderRequestAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WeChatPayCloseOrderRequest's appid is equal to the given one.
   * @param appid the given appid to compare the actual WeChatPayCloseOrderRequest's appid to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayCloseOrderRequest's appid is not equal to the given one.
   */
  public S hasAppid(String appid) {
    // check that actual WeChatPayCloseOrderRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting appid of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAppid = actual.getAppid();
    if (!Objects.areEqual(actualAppid, appid)) {
      failWithMessage(assertjErrorMessage, actual, appid, actualAppid);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayCloseOrderRequest's mchId is equal to the given one.
   * @param mchId the given mchId to compare the actual WeChatPayCloseOrderRequest's mchId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayCloseOrderRequest's mchId is not equal to the given one.
   */
  public S hasMchId(String mchId) {
    // check that actual WeChatPayCloseOrderRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting mchId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualMchId = actual.getMchId();
    if (!Objects.areEqual(actualMchId, mchId)) {
      failWithMessage(assertjErrorMessage, actual, mchId, actualMchId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayCloseOrderRequest's nonceStr is equal to the given one.
   * @param nonceStr the given nonceStr to compare the actual WeChatPayCloseOrderRequest's nonceStr to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayCloseOrderRequest's nonceStr is not equal to the given one.
   */
  public S hasNonceStr(String nonceStr) {
    // check that actual WeChatPayCloseOrderRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nonceStr of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualNonceStr = actual.getNonceStr();
    if (!Objects.areEqual(actualNonceStr, nonceStr)) {
      failWithMessage(assertjErrorMessage, actual, nonceStr, actualNonceStr);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayCloseOrderRequest's outTradeNo is equal to the given one.
   * @param outTradeNo the given outTradeNo to compare the actual WeChatPayCloseOrderRequest's outTradeNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayCloseOrderRequest's outTradeNo is not equal to the given one.
   */
  public S hasOutTradeNo(String outTradeNo) {
    // check that actual WeChatPayCloseOrderRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outTradeNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutTradeNo = actual.getOutTradeNo();
    if (!Objects.areEqual(actualOutTradeNo, outTradeNo)) {
      failWithMessage(assertjErrorMessage, actual, outTradeNo, actualOutTradeNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayCloseOrderRequest's sign is equal to the given one.
   * @param sign the given sign to compare the actual WeChatPayCloseOrderRequest's sign to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayCloseOrderRequest's sign is not equal to the given one.
   */
  public S hasSign(String sign) {
    // check that actual WeChatPayCloseOrderRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sign of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualSign = actual.getSign();
    if (!Objects.areEqual(actualSign, sign)) {
      failWithMessage(assertjErrorMessage, actual, sign, actualSign);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayCloseOrderRequest's signType is equal to the given one.
   * @param signType the given signType to compare the actual WeChatPayCloseOrderRequest's signType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayCloseOrderRequest's signType is not equal to the given one.
   */
  public S hasSignType(String signType) {
    // check that actual WeChatPayCloseOrderRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting signType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualSignType = actual.getSignType();
    if (!Objects.areEqual(actualSignType, signType)) {
      failWithMessage(assertjErrorMessage, actual, signType, actualSignType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
