package cn.javaer.wechat.sdk.pay.model;

import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link WeChatPayRefundResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWeChatPayRefundResponseAssert<S extends AbstractWeChatPayRefundResponseAssert<S, A>, A extends WeChatPayRefundResponse> extends AbstractWeChatPayResponseAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWeChatPayRefundResponseAssert}</code> to make assertions on actual WeChatPayRefundResponse.
   * @param actual the WeChatPayRefundResponse we want to make assertions on.
   */
  protected AbstractWeChatPayRefundResponseAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's cashFee is equal to the given one.
   * @param cashFee the given cashFee to compare the actual WeChatPayRefundResponse's cashFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's cashFee is not equal to the given one.
   */
  public S hasCashFee(String cashFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cashFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCashFee = actual.getCashFee();
    if (!Objects.areEqual(actualCashFee, cashFee)) {
      failWithMessage(assertjErrorMessage, actual, cashFee, actualCashFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's cashFeeType is equal to the given one.
   * @param cashFeeType the given cashFeeType to compare the actual WeChatPayRefundResponse's cashFeeType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's cashFeeType is not equal to the given one.
   */
  public S hasCashFeeType(String cashFeeType) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cashFeeType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCashFeeType = actual.getCashFeeType();
    if (!Objects.areEqual(actualCashFeeType, cashFeeType)) {
      failWithMessage(assertjErrorMessage, actual, cashFeeType, actualCashFeeType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's cashRefundFee is equal to the given one.
   * @param cashRefundFee the given cashRefundFee to compare the actual WeChatPayRefundResponse's cashRefundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's cashRefundFee is not equal to the given one.
   */
  public S hasCashRefundFee(String cashRefundFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cashRefundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCashRefundFee = actual.getCashRefundFee();
    if (!Objects.areEqual(actualCashRefundFee, cashRefundFee)) {
      failWithMessage(assertjErrorMessage, actual, cashRefundFee, actualCashRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponFee0 is equal to the given one.
   * @param couponFee0 the given couponFee0 to compare the actual WeChatPayRefundResponse's couponFee0 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponFee0 is not equal to the given one.
   */
  public S hasCouponFee0(String couponFee0) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponFee0 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponFee0 = actual.getCouponFee0();
    if (!Objects.areEqual(actualCouponFee0, couponFee0)) {
      failWithMessage(assertjErrorMessage, actual, couponFee0, actualCouponFee0);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponFee1 is equal to the given one.
   * @param couponFee1 the given couponFee1 to compare the actual WeChatPayRefundResponse's couponFee1 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponFee1 is not equal to the given one.
   */
  public S hasCouponFee1(String couponFee1) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponFee1 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponFee1 = actual.getCouponFee1();
    if (!Objects.areEqual(actualCouponFee1, couponFee1)) {
      failWithMessage(assertjErrorMessage, actual, couponFee1, actualCouponFee1);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponFee2 is equal to the given one.
   * @param couponFee2 the given couponFee2 to compare the actual WeChatPayRefundResponse's couponFee2 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponFee2 is not equal to the given one.
   */
  public S hasCouponFee2(String couponFee2) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponFee2 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponFee2 = actual.getCouponFee2();
    if (!Objects.areEqual(actualCouponFee2, couponFee2)) {
      failWithMessage(assertjErrorMessage, actual, couponFee2, actualCouponFee2);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponFee3 is equal to the given one.
   * @param couponFee3 the given couponFee3 to compare the actual WeChatPayRefundResponse's couponFee3 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponFee3 is not equal to the given one.
   */
  public S hasCouponFee3(String couponFee3) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponFee3 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponFee3 = actual.getCouponFee3();
    if (!Objects.areEqual(actualCouponFee3, couponFee3)) {
      failWithMessage(assertjErrorMessage, actual, couponFee3, actualCouponFee3);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponFee4 is equal to the given one.
   * @param couponFee4 the given couponFee4 to compare the actual WeChatPayRefundResponse's couponFee4 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponFee4 is not equal to the given one.
   */
  public S hasCouponFee4(String couponFee4) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponFee4 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponFee4 = actual.getCouponFee4();
    if (!Objects.areEqual(actualCouponFee4, couponFee4)) {
      failWithMessage(assertjErrorMessage, actual, couponFee4, actualCouponFee4);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponId0 is equal to the given one.
   * @param couponId0 the given couponId0 to compare the actual WeChatPayRefundResponse's couponId0 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponId0 is not equal to the given one.
   */
  public S hasCouponId0(String couponId0) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponId0 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponId0 = actual.getCouponId0();
    if (!Objects.areEqual(actualCouponId0, couponId0)) {
      failWithMessage(assertjErrorMessage, actual, couponId0, actualCouponId0);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponId1 is equal to the given one.
   * @param couponId1 the given couponId1 to compare the actual WeChatPayRefundResponse's couponId1 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponId1 is not equal to the given one.
   */
  public S hasCouponId1(String couponId1) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponId1 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponId1 = actual.getCouponId1();
    if (!Objects.areEqual(actualCouponId1, couponId1)) {
      failWithMessage(assertjErrorMessage, actual, couponId1, actualCouponId1);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponId2 is equal to the given one.
   * @param couponId2 the given couponId2 to compare the actual WeChatPayRefundResponse's couponId2 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponId2 is not equal to the given one.
   */
  public S hasCouponId2(String couponId2) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponId2 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponId2 = actual.getCouponId2();
    if (!Objects.areEqual(actualCouponId2, couponId2)) {
      failWithMessage(assertjErrorMessage, actual, couponId2, actualCouponId2);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponId3 is equal to the given one.
   * @param couponId3 the given couponId3 to compare the actual WeChatPayRefundResponse's couponId3 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponId3 is not equal to the given one.
   */
  public S hasCouponId3(String couponId3) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponId3 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponId3 = actual.getCouponId3();
    if (!Objects.areEqual(actualCouponId3, couponId3)) {
      failWithMessage(assertjErrorMessage, actual, couponId3, actualCouponId3);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponId4 is equal to the given one.
   * @param couponId4 the given couponId4 to compare the actual WeChatPayRefundResponse's couponId4 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponId4 is not equal to the given one.
   */
  public S hasCouponId4(String couponId4) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponId4 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponId4 = actual.getCouponId4();
    if (!Objects.areEqual(actualCouponId4, couponId4)) {
      failWithMessage(assertjErrorMessage, actual, couponId4, actualCouponId4);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponRefundCount is equal to the given one.
   * @param couponRefundCount the given couponRefundCount to compare the actual WeChatPayRefundResponse's couponRefundCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponRefundCount is not equal to the given one.
   */
  public S hasCouponRefundCount(String couponRefundCount) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponRefundCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponRefundCount = actual.getCouponRefundCount();
    if (!Objects.areEqual(actualCouponRefundCount, couponRefundCount)) {
      failWithMessage(assertjErrorMessage, actual, couponRefundCount, actualCouponRefundCount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponRefundFee is equal to the given one.
   * @param couponRefundFee the given couponRefundFee to compare the actual WeChatPayRefundResponse's couponRefundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponRefundFee is not equal to the given one.
   */
  public S hasCouponRefundFee(String couponRefundFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponRefundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponRefundFee = actual.getCouponRefundFee();
    if (!Objects.areEqual(actualCouponRefundFee, couponRefundFee)) {
      failWithMessage(assertjErrorMessage, actual, couponRefundFee, actualCouponRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponType0 is equal to the given one.
   * @param couponType0 the given couponType0 to compare the actual WeChatPayRefundResponse's couponType0 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponType0 is not equal to the given one.
   */
  public S hasCouponType0(String couponType0) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponType0 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponType0 = actual.getCouponType0();
    if (!Objects.areEqual(actualCouponType0, couponType0)) {
      failWithMessage(assertjErrorMessage, actual, couponType0, actualCouponType0);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponType1 is equal to the given one.
   * @param couponType1 the given couponType1 to compare the actual WeChatPayRefundResponse's couponType1 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponType1 is not equal to the given one.
   */
  public S hasCouponType1(String couponType1) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponType1 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponType1 = actual.getCouponType1();
    if (!Objects.areEqual(actualCouponType1, couponType1)) {
      failWithMessage(assertjErrorMessage, actual, couponType1, actualCouponType1);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponType2 is equal to the given one.
   * @param couponType2 the given couponType2 to compare the actual WeChatPayRefundResponse's couponType2 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponType2 is not equal to the given one.
   */
  public S hasCouponType2(String couponType2) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponType2 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponType2 = actual.getCouponType2();
    if (!Objects.areEqual(actualCouponType2, couponType2)) {
      failWithMessage(assertjErrorMessage, actual, couponType2, actualCouponType2);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponType3 is equal to the given one.
   * @param couponType3 the given couponType3 to compare the actual WeChatPayRefundResponse's couponType3 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponType3 is not equal to the given one.
   */
  public S hasCouponType3(String couponType3) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponType3 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponType3 = actual.getCouponType3();
    if (!Objects.areEqual(actualCouponType3, couponType3)) {
      failWithMessage(assertjErrorMessage, actual, couponType3, actualCouponType3);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponType4 is equal to the given one.
   * @param couponType4 the given couponType4 to compare the actual WeChatPayRefundResponse's couponType4 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponType4 is not equal to the given one.
   */
  public S hasCouponType4(String couponType4) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponType4 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCouponType4 = actual.getCouponType4();
    if (!Objects.areEqual(actualCouponType4, couponType4)) {
      failWithMessage(assertjErrorMessage, actual, couponType4, actualCouponType4);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's feeType is equal to the given one.
   * @param feeType the given feeType to compare the actual WeChatPayRefundResponse's feeType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's feeType is not equal to the given one.
   */
  public S hasFeeType(String feeType) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting feeType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFeeType = actual.getFeeType();
    if (!Objects.areEqual(actualFeeType, feeType)) {
      failWithMessage(assertjErrorMessage, actual, feeType, actualFeeType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's outRefundNo is equal to the given one.
   * @param outRefundNo the given outRefundNo to compare the actual WeChatPayRefundResponse's outRefundNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's outRefundNo is not equal to the given one.
   */
  public S hasOutRefundNo(String outRefundNo) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outRefundNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutRefundNo = actual.getOutRefundNo();
    if (!Objects.areEqual(actualOutRefundNo, outRefundNo)) {
      failWithMessage(assertjErrorMessage, actual, outRefundNo, actualOutRefundNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's outTradeNo is equal to the given one.
   * @param outTradeNo the given outTradeNo to compare the actual WeChatPayRefundResponse's outTradeNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's outTradeNo is not equal to the given one.
   */
  public S hasOutTradeNo(String outTradeNo) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outTradeNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutTradeNo = actual.getOutTradeNo();
    if (!Objects.areEqual(actualOutTradeNo, outTradeNo)) {
      failWithMessage(assertjErrorMessage, actual, outTradeNo, actualOutTradeNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's refundFee is equal to the given one.
   * @param refundFee the given refundFee to compare the actual WeChatPayRefundResponse's refundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's refundFee is not equal to the given one.
   */
  public S hasRefundFee(String refundFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundFee = actual.getRefundFee();
    if (!Objects.areEqual(actualRefundFee, refundFee)) {
      failWithMessage(assertjErrorMessage, actual, refundFee, actualRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's refundId is equal to the given one.
   * @param refundId the given refundId to compare the actual WeChatPayRefundResponse's refundId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's refundId is not equal to the given one.
   */
  public S hasRefundId(String refundId) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundId = actual.getRefundId();
    if (!Objects.areEqual(actualRefundId, refundId)) {
      failWithMessage(assertjErrorMessage, actual, refundId, actualRefundId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's settlementRefundFee is equal to the given one.
   * @param settlementRefundFee the given settlementRefundFee to compare the actual WeChatPayRefundResponse's settlementRefundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's settlementRefundFee is not equal to the given one.
   */
  public S hasSettlementRefundFee(String settlementRefundFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting settlementRefundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualSettlementRefundFee = actual.getSettlementRefundFee();
    if (!Objects.areEqual(actualSettlementRefundFee, settlementRefundFee)) {
      failWithMessage(assertjErrorMessage, actual, settlementRefundFee, actualSettlementRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's settlementTotalFee is equal to the given one.
   * @param settlementTotalFee the given settlementTotalFee to compare the actual WeChatPayRefundResponse's settlementTotalFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's settlementTotalFee is not equal to the given one.
   */
  public S hasSettlementTotalFee(String settlementTotalFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting settlementTotalFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualSettlementTotalFee = actual.getSettlementTotalFee();
    if (!Objects.areEqual(actualSettlementTotalFee, settlementTotalFee)) {
      failWithMessage(assertjErrorMessage, actual, settlementTotalFee, actualSettlementTotalFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's totalFee is equal to the given one.
   * @param totalFee the given totalFee to compare the actual WeChatPayRefundResponse's totalFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's totalFee is not equal to the given one.
   */
  public S hasTotalFee(String totalFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting totalFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTotalFee = actual.getTotalFee();
    if (!Objects.areEqual(actualTotalFee, totalFee)) {
      failWithMessage(assertjErrorMessage, actual, totalFee, actualTotalFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's transactionId is equal to the given one.
   * @param transactionId the given transactionId to compare the actual WeChatPayRefundResponse's transactionId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's transactionId is not equal to the given one.
   */
  public S hasTransactionId(String transactionId) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting transactionId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTransactionId = actual.getTransactionId();
    if (!Objects.areEqual(actualTransactionId, transactionId)) {
      failWithMessage(assertjErrorMessage, actual, transactionId, actualTransactionId);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
