package cn.javaer.wechat.sdk.pay.model;

import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link WeChatPayRefundQueryRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWeChatPayRefundQueryRequestAssert<S extends AbstractWeChatPayRefundQueryRequestAssert<S, A>, A extends WeChatPayRefundQueryRequest> extends AbstractWeChatPayRequestAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWeChatPayRefundQueryRequestAssert}</code> to make assertions on actual WeChatPayRefundQueryRequest.
   * @param actual the WeChatPayRefundQueryRequest we want to make assertions on.
   */
  protected AbstractWeChatPayRefundQueryRequestAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WeChatPayRefundQueryRequest's offset is equal to the given one.
   * @param offset the given offset to compare the actual WeChatPayRefundQueryRequest's offset to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundQueryRequest's offset is not equal to the given one.
   */
  public S hasOffset(Integer offset) {
    // check that actual WeChatPayRefundQueryRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting offset of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualOffset = actual.getOffset();
    if (!Objects.areEqual(actualOffset, offset)) {
      failWithMessage(assertjErrorMessage, actual, offset, actualOffset);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundQueryRequest's outRefundNo is equal to the given one.
   * @param outRefundNo the given outRefundNo to compare the actual WeChatPayRefundQueryRequest's outRefundNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundQueryRequest's outRefundNo is not equal to the given one.
   */
  public S hasOutRefundNo(String outRefundNo) {
    // check that actual WeChatPayRefundQueryRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outRefundNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutRefundNo = actual.getOutRefundNo();
    if (!Objects.areEqual(actualOutRefundNo, outRefundNo)) {
      failWithMessage(assertjErrorMessage, actual, outRefundNo, actualOutRefundNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundQueryRequest's outTradeNo is equal to the given one.
   * @param outTradeNo the given outTradeNo to compare the actual WeChatPayRefundQueryRequest's outTradeNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundQueryRequest's outTradeNo is not equal to the given one.
   */
  public S hasOutTradeNo(String outTradeNo) {
    // check that actual WeChatPayRefundQueryRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outTradeNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutTradeNo = actual.getOutTradeNo();
    if (!Objects.areEqual(actualOutTradeNo, outTradeNo)) {
      failWithMessage(assertjErrorMessage, actual, outTradeNo, actualOutTradeNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundQueryRequest's refundId is equal to the given one.
   * @param refundId the given refundId to compare the actual WeChatPayRefundQueryRequest's refundId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundQueryRequest's refundId is not equal to the given one.
   */
  public S hasRefundId(String refundId) {
    // check that actual WeChatPayRefundQueryRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundId = actual.getRefundId();
    if (!Objects.areEqual(actualRefundId, refundId)) {
      failWithMessage(assertjErrorMessage, actual, refundId, actualRefundId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundQueryRequest's transactionId is equal to the given one.
   * @param transactionId the given transactionId to compare the actual WeChatPayRefundQueryRequest's transactionId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundQueryRequest's transactionId is not equal to the given one.
   */
  public S hasTransactionId(String transactionId) {
    // check that actual WeChatPayRefundQueryRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting transactionId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTransactionId = actual.getTransactionId();
    if (!Objects.areEqual(actualTransactionId, transactionId)) {
      failWithMessage(assertjErrorMessage, actual, transactionId, actualTransactionId);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
