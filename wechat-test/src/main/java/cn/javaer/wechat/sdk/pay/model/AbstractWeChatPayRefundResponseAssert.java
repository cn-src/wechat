package cn.javaer.wechat.sdk.pay.model;

import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link WeChatPayRefundResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWeChatPayRefundResponseAssert<S extends AbstractWeChatPayRefundResponseAssert<S, A>, A extends WeChatPayRefundResponse> extends AbstractWeChatPayResponseAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWeChatPayRefundResponseAssert}</code> to make assertions on actual WeChatPayRefundResponse.
   * @param actual the WeChatPayRefundResponse we want to make assertions on.
   */
  protected AbstractWeChatPayRefundResponseAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's cashFee is equal to the given one.
   * @param cashFee the given cashFee to compare the actual WeChatPayRefundResponse's cashFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's cashFee is not equal to the given one.
   */
  public S hasCashFee(Integer cashFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cashFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualCashFee = actual.getCashFee();
    if (!Objects.areEqual(actualCashFee, cashFee)) {
      failWithMessage(assertjErrorMessage, actual, cashFee, actualCashFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's cashFeeType is equal to the given one.
   * @param cashFeeType the given cashFeeType to compare the actual WeChatPayRefundResponse's cashFeeType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's cashFeeType is not equal to the given one.
   */
  public S hasCashFeeType(String cashFeeType) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cashFeeType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCashFeeType = actual.getCashFeeType();
    if (!Objects.areEqual(actualCashFeeType, cashFeeType)) {
      failWithMessage(assertjErrorMessage, actual, cashFeeType, actualCashFeeType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's cashRefundFee is equal to the given one.
   * @param cashRefundFee the given cashRefundFee to compare the actual WeChatPayRefundResponse's cashRefundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's cashRefundFee is not equal to the given one.
   */
  public S hasCashRefundFee(Integer cashRefundFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cashRefundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualCashRefundFee = actual.getCashRefundFee();
    if (!Objects.areEqual(actualCashRefundFee, cashRefundFee)) {
      failWithMessage(assertjErrorMessage, actual, cashRefundFee, actualCashRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponRefundCount is equal to the given one.
   * @param couponRefundCount the given couponRefundCount to compare the actual WeChatPayRefundResponse's couponRefundCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponRefundCount is not equal to the given one.
   */
  public S hasCouponRefundCount(Integer couponRefundCount) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponRefundCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualCouponRefundCount = actual.getCouponRefundCount();
    if (!Objects.areEqual(actualCouponRefundCount, couponRefundCount)) {
      failWithMessage(assertjErrorMessage, actual, couponRefundCount, actualCouponRefundCount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's couponRefundFee is equal to the given one.
   * @param couponRefundFee the given couponRefundFee to compare the actual WeChatPayRefundResponse's couponRefundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's couponRefundFee is not equal to the given one.
   */
  public S hasCouponRefundFee(Integer couponRefundFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting couponRefundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualCouponRefundFee = actual.getCouponRefundFee();
    if (!Objects.areEqual(actualCouponRefundFee, couponRefundFee)) {
      failWithMessage(assertjErrorMessage, actual, couponRefundFee, actualCouponRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's feeType is equal to the given one.
   * @param feeType the given feeType to compare the actual WeChatPayRefundResponse's feeType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's feeType is not equal to the given one.
   */
  public S hasFeeType(String feeType) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting feeType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFeeType = actual.getFeeType();
    if (!Objects.areEqual(actualFeeType, feeType)) {
      failWithMessage(assertjErrorMessage, actual, feeType, actualFeeType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's outRefundNo is equal to the given one.
   * @param outRefundNo the given outRefundNo to compare the actual WeChatPayRefundResponse's outRefundNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's outRefundNo is not equal to the given one.
   */
  public S hasOutRefundNo(String outRefundNo) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outRefundNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutRefundNo = actual.getOutRefundNo();
    if (!Objects.areEqual(actualOutRefundNo, outRefundNo)) {
      failWithMessage(assertjErrorMessage, actual, outRefundNo, actualOutRefundNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's outTradeNo is equal to the given one.
   * @param outTradeNo the given outTradeNo to compare the actual WeChatPayRefundResponse's outTradeNo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's outTradeNo is not equal to the given one.
   */
  public S hasOutTradeNo(String outTradeNo) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting outTradeNo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOutTradeNo = actual.getOutTradeNo();
    if (!Objects.areEqual(actualOutTradeNo, outTradeNo)) {
      failWithMessage(assertjErrorMessage, actual, outTradeNo, actualOutTradeNo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's refundCoupons is equal to the given one.
   * @param refundCoupons the given refundCoupons to compare the actual WeChatPayRefundResponse's refundCoupons to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's refundCoupons is not equal to the given one.
   */
  public S hasRefundCoupons(java.util.Map refundCoupons) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundCoupons of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualRefundCoupons = actual.getRefundCoupons();
    if (!Objects.areEqual(actualRefundCoupons, refundCoupons)) {
      failWithMessage(assertjErrorMessage, actual, refundCoupons, actualRefundCoupons);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's refundFee is equal to the given one.
   * @param refundFee the given refundFee to compare the actual WeChatPayRefundResponse's refundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's refundFee is not equal to the given one.
   */
  public S hasRefundFee(Integer refundFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualRefundFee = actual.getRefundFee();
    if (!Objects.areEqual(actualRefundFee, refundFee)) {
      failWithMessage(assertjErrorMessage, actual, refundFee, actualRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's refundId is equal to the given one.
   * @param refundId the given refundId to compare the actual WeChatPayRefundResponse's refundId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's refundId is not equal to the given one.
   */
  public S hasRefundId(String refundId) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refundId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefundId = actual.getRefundId();
    if (!Objects.areEqual(actualRefundId, refundId)) {
      failWithMessage(assertjErrorMessage, actual, refundId, actualRefundId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's settlementRefundFee is equal to the given one.
   * @param settlementRefundFee the given settlementRefundFee to compare the actual WeChatPayRefundResponse's settlementRefundFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's settlementRefundFee is not equal to the given one.
   */
  public S hasSettlementRefundFee(Integer settlementRefundFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting settlementRefundFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualSettlementRefundFee = actual.getSettlementRefundFee();
    if (!Objects.areEqual(actualSettlementRefundFee, settlementRefundFee)) {
      failWithMessage(assertjErrorMessage, actual, settlementRefundFee, actualSettlementRefundFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's settlementTotalFee is equal to the given one.
   * @param settlementTotalFee the given settlementTotalFee to compare the actual WeChatPayRefundResponse's settlementTotalFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's settlementTotalFee is not equal to the given one.
   */
  public S hasSettlementTotalFee(Integer settlementTotalFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting settlementTotalFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualSettlementTotalFee = actual.getSettlementTotalFee();
    if (!Objects.areEqual(actualSettlementTotalFee, settlementTotalFee)) {
      failWithMessage(assertjErrorMessage, actual, settlementTotalFee, actualSettlementTotalFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's totalFee is equal to the given one.
   * @param totalFee the given totalFee to compare the actual WeChatPayRefundResponse's totalFee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's totalFee is not equal to the given one.
   */
  public S hasTotalFee(Integer totalFee) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting totalFee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualTotalFee = actual.getTotalFee();
    if (!Objects.areEqual(actualTotalFee, totalFee)) {
      failWithMessage(assertjErrorMessage, actual, totalFee, actualTotalFee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WeChatPayRefundResponse's transactionId is equal to the given one.
   * @param transactionId the given transactionId to compare the actual WeChatPayRefundResponse's transactionId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WeChatPayRefundResponse's transactionId is not equal to the given one.
   */
  public S hasTransactionId(String transactionId) {
    // check that actual WeChatPayRefundResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting transactionId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTransactionId = actual.getTransactionId();
    if (!Objects.areEqual(actualTransactionId, transactionId)) {
      failWithMessage(assertjErrorMessage, actual, transactionId, actualTransactionId);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
